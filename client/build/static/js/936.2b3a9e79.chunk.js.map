{"version":3,"file":"static/js/936.2b3a9e79.chunk.js","mappings":"gTAEA,MAAMA,GAASC,E,QAAAA,IAAG,wBAAyB,CACzCC,aAAa,IAQf,I,aCuHA,QA5GA,SAAaC,GAAY,IAADC,EAAAC,EAAA,IAAV,KAAEC,GAAMH,EACpB,MAAM,KAAEI,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,IACrBC,EAAOC,IAAYC,EAAAA,EAAAA,WAAmB,QAAVR,EAAAE,EAAKI,aAAK,IAAAN,OAAA,EAAVA,EAAYS,SAAU,IAClDC,EAASC,IAAcH,EAAAA,EAAAA,WAAS,IAChCI,EAAaC,IAAkBL,EAAAA,EAAAA,UAAS,IAmC/C,OAZAM,EAAAA,EAAAA,WAAU,KACRlB,EAAOmB,GAAG,aAAcC,IAA6B,IAA5B,OAAEC,EAAM,WAAEC,GAAYF,EACzCC,IAAWf,EAAKiB,KAClBZ,EAASW,KAIN,KACLtB,EAAOwB,IAAI,gBAEZ,CAAClB,EAAKiB,OAGPE,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHC,GAAI,CACFC,GAAI,EACJC,aAAc,OACdC,WAAY,2BACZC,eAAgB,aAChBC,OAAQ,qCACRC,UAAW,iCACXC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,QAAQF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,IAAKjC,EAAKC,KAAK8B,QAAU,wBACzCG,MAAOlC,EAAKC,KAAKkC,SACjBC,WAAWC,EAAAA,EAAAA,GAAoB,IAAIC,KAAKtC,EAAKuC,WAAY,CAAEC,WAAW,IACtEC,QAAQZ,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAAAd,UAACC,EAAAA,EAAAA,KAACc,EAAAA,EAAY,MACjCtB,GAAI,CAAEuB,GAAI,MAGZf,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRC,UAAU,MACVC,OAAO,MACPC,MAAOhD,EAAKgD,OAAS,mBACrB3B,GAAI,CACFE,aAAc,OACd0B,EAAG,EACHtB,UAAW,2CAIfR,EAAAA,EAAAA,MAAC+B,EAAAA,EAAW,CAAAtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,QAAQ/B,GAAI,CAAEC,GAAI,GAAIM,SACvC5B,EAAKqD,WAGRxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,CAACjC,GAAI,CAAEkC,GAAI,MAEnBpC,EAAAA,EAAAA,MAACqC,EAAAA,EAAG,CAACnC,GAAI,CAAEoC,QAAS,OAAQC,IAAK,EAAGC,WAAY,UAAW/B,SAAA,EACzDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAOC,KAAI,CACVC,QAxESC,KACjB1D,EAASG,EAAUJ,EAAQ,EAAIA,EAAQ,GACvCK,GAAYD,GAGZd,EAAOsE,KAAK,YAAa,CAAEjD,OAAQf,EAAKiB,IAAKgD,OAAQhE,EAAKgB,OAoElDiD,SAAU,CAAEC,MAAO,KACnBC,QAAS,CAAED,MAAO3D,EAAU,CAAC,EAAG,IAAK,GAAK,GAC1C6D,MAAO,CAAEZ,QAAS,eAAgBa,OAAQ,WAAY1C,UAEtDC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAY,CAACC,MAAOhE,EAAU,QAAU,gBAE3CqB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAAAvB,SAAExB,KACbyB,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAAAd,UACTC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,OAEd5C,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAAAvB,UAAe,QAAb7B,EAAAC,EAAK0E,gBAAQ,IAAA3E,OAAA,EAAbA,EAAeQ,SAAU,QAIxCY,EAAAA,EAAAA,MAACqC,EAAAA,EAAG,CAACnC,GAAI,CAAEsD,GAAI,EAAGlB,QAAS,OAAQC,IAAK,GAAI9B,SAAA,EAC1CC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CACRC,WAAS,EACTC,KAAK,QACLC,YAAY,qBACZC,MAAOtE,EACPuE,SAAWC,GAAMvE,EAAeuE,EAAEC,OAAOH,UAE3CnD,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,CAAChC,QAAQ,YAAYU,QAvFduB,KACf3E,EAAY4E,SAGjB5F,EAAOsE,KAAK,oBAAqB,CAC/BC,OAAQjE,EAAKC,KAAKgB,IAClBsE,QAAQ,GAADC,OAAKvF,EAAKkC,SAAQ,6BAI3BxB,EAAe,MA6E0CiB,SAAC,iBAK9D,E,cC9He,SAAS6D,IACtB,OACE5D,EAAAA,EAAAA,KAAA,OAAK6D,UAAU,kBAAiB9D,UAC9BC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAW,CAACnB,MAAM,UAAUM,KAAM,MAGzC,CCDe,SAASc,IACtB,MAAM,KAAE3F,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,IACrB0F,EAAOC,IAAYxF,EAAAA,EAAAA,UAAS,KAC5ByF,EAASC,IAAc1F,EAAAA,EAAAA,WAAS,IAGvCM,EAAAA,EAAAA,WAAU,KACWqF,WACjB,IACE,MAAMC,QAAYC,EAAAA,GAAIC,IAAI,UAC1BN,EAASI,EAAIG,KACf,CAAE,MAAOC,GACPC,QAAQC,MAAM,wBAAyBF,EACzC,CAAC,QACCN,GAAW,EACb,GAEFS,IACC,IAGH,MAAMC,EAAeT,UACnB,IACE,MAAMC,QAAYC,EAAAA,GAAIC,IAAI,UAC1BN,EAASI,EAAIG,KACf,CAAE,MAAOC,GACPC,QAAQC,MAAM,0BAA2BF,EAC3C,GAGF,OAAIP,GAAgBlE,EAAAA,EAAAA,KAAC4D,EAAO,KAG1B5D,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAACnC,GAAI,CAAEsD,GAAI,GAAI/C,SAChBiE,EAAMc,IAAK3G,IACV6B,EAAAA,EAAAA,KAAC+E,EAAI,CAEH5G,KAAMA,EACN6G,YAAa5G,EACb6G,cAAeJ,GAHV1G,EAAKiB,OAQpB,C,oGC1BA,QApBA,WACE,MAAM,QAAE8E,GAAU,IAAU7F,EAAAA,EAAAA,YAAWC,EAAAA,IAAgB,CAAC,EAExD,OACE0B,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAAE0C,QAAS,QAASnF,SAC7BmE,GACClE,EAAAA,EAAAA,KAACmF,EAAAA,EAAQ,CACP5D,QAAQ,cACR6D,MAAO,IACPlE,OAAQ,IACRmE,UAAU,OACV7F,GAAI,CAAEE,aAAc,MAGtBM,EAAAA,EAAAA,KAAC+D,EAAAA,EAAQ,KAIjB,C","sources":["utils/socket.js","components/Post.js","components/Loading.js","components/PostList.js","pages/Home.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:5000', {\r\n  autoConnect: false // Connect manually after auth\r\n});\r\n\r\nexport const connectSocket = (token) => {\r\n  socket.auth = { token };\r\n  socket.connect();\r\n};\r\n\r\nexport default socket;","import React, { useState, useContext, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardMedia,\r\n  Typography,\r\n  IconButton,\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n  TextField,\r\n  Button\r\n} from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport CommentIcon from '@mui/icons-material/Comment';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { motion } from 'framer-motion';\r\nimport socket from '../utils/socket';\r\n\r\nfunction Post({ post }) {\r\n  const { user } = useContext(AuthContext);\r\n  const [likes, setLikes] = useState(post.likes?.length || 0);\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n\r\n  const handleLike = () => {\r\n    setLikes(isLiked ? likes - 1 : likes + 1);\r\n    setIsLiked(!isLiked);\r\n\r\n    // Emit the like event to the server\r\n    socket.emit('like-post', { postId: post._id, userId: user._id });\r\n  };\r\n\r\n  const handleComment = () => {\r\n    if (!commentText.trim()) return;\r\n\r\n    // üîî Emit a notification to the post author\r\n    socket.emit('send-notification', {\r\n      userId: post.user._id, // author of the post\r\n      message: `${user.username} commented on your post`\r\n    });\r\n\r\n    // TODO: Call backend API to save comment\r\n    setCommentText('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on('post-liked', ({ postId, likesCount }) => {\r\n      if (postId === post._id) {\r\n        setLikes(likesCount);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off('post-liked');\r\n    };\r\n  }, [post._id]);\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        mb: 3,\r\n        borderRadius: '20px',\r\n        background: 'rgba(255, 255, 255, 0.7)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255, 255, 255, 0.2)',\r\n        boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',\r\n      }}\r\n    >\r\n      <CardHeader\r\n        avatar={<Avatar src={post.user.avatar || '/default-avatar.png'} />}\r\n        title={post.user.username}\r\n        subheader={formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}\r\n        action={<IconButton><MoreVertIcon /></IconButton>}\r\n        sx={{ pb: 0 }}\r\n      />\r\n\r\n      <CardMedia\r\n        component=\"img\"\r\n        height=\"500\"\r\n        image={post.image || '/placeholder.jpg'}\r\n        sx={{\r\n          borderRadius: '15px',\r\n          m: 2,\r\n          boxShadow: '4px 4px 8px #ccc, -4px -4px 8px #fff',\r\n        }}\r\n      />\r\n\r\n      <CardContent>\r\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n          {post.content}\r\n        </Typography>\r\n\r\n        <Divider sx={{ my: 2 }} />\r\n\r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n          <motion.span\r\n            onClick={handleLike}\r\n            whileTap={{ scale: 1.5 }}\r\n            animate={{ scale: isLiked ? [1, 1.2, 1] : 1 }}\r\n            style={{ display: 'inline-block', cursor: 'pointer' }}\r\n          >\r\n            <FavoriteIcon color={isLiked ? 'error' : 'disabled'} />\r\n          </motion.span>\r\n          <Typography>{likes}</Typography>\r\n          <IconButton>\r\n            <CommentIcon />\r\n          </IconButton>\r\n          <Typography>{post.comments?.length || 0}</Typography>\r\n        </Box>\r\n\r\n        {/* Comment Input Box */}\r\n        <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\r\n          <TextField\r\n            fullWidth\r\n            size=\"small\"\r\n            placeholder=\"Write a comment...\"\r\n            value={commentText}\r\n            onChange={(e) => setCommentText(e.target.value)}\r\n          />\r\n          <Button variant=\"contained\" onClick={handleComment}>Send</Button>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import { PulseLoader } from 'react-spinners';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className=\"loading-overlay\">\r\n      <PulseLoader color=\"#36d7b7\" size={15} />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Box } from '@mui/material';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport api from '../utils/api';\r\nimport Post from './Post';\r\nimport Loading from './Loading'; // ‚¨ÖÔ∏è Import the loading spinner\r\n\r\nexport default function PostList() {\r\n  const { user } = useContext(AuthContext);\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true); // ‚¨ÖÔ∏è Loading state\r\n\r\n  // üåê Fetch posts on mount\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const res = await api.get('/posts');\r\n        setPosts(res.data);\r\n      } catch (err) {\r\n        console.error('Error fetching posts:', err);\r\n      } finally {\r\n        setLoading(false); // ‚úÖ Done loading\r\n      }\r\n    };\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // üîÅ Refresh posts after likes/comments\r\n  const refreshPosts = async () => {\r\n    try {\r\n      const res = await api.get('/posts');\r\n      setPosts(res.data);\r\n    } catch (err) {\r\n      console.error('Error refreshing posts:', err);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Loading />; // ‚¨ÖÔ∏è Show spinner while loading\r\n\r\n  return (\r\n    <Box sx={{ mt: 2 }}>\r\n      {posts.map((post) => (\r\n        <Post \r\n          key={post._id} \r\n          post={post} \r\n          currentUser={user}\r\n          onInteraction={refreshPosts} \r\n        />\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport PostList from '../components/PostList';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nfunction Home() {\r\n  const { loading = false } = useContext(AuthContext) || {};\r\n\r\n  return (\r\n    <div style={{ padding: '2rem' }}>\r\n      {loading ? (\r\n        <Skeleton\r\n          variant=\"rectangular\"\r\n          width={500}\r\n          height={300}\r\n          animation=\"wave\"\r\n          sx={{ borderRadius: 2 }}\r\n        />\r\n      ) : (\r\n        <PostList />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"names":["socket","io","autoConnect","_ref","_post$likes","_post$comments","post","user","useContext","AuthContext","likes","setLikes","useState","length","isLiked","setIsLiked","commentText","setCommentText","useEffect","on","_ref2","postId","likesCount","_id","off","_jsxs","Card","sx","mb","borderRadius","background","backdropFilter","border","boxShadow","children","_jsx","CardHeader","avatar","Avatar","src","title","username","subheader","formatDistanceToNow","Date","createdAt","addSuffix","action","IconButton","MoreVertIcon","pb","CardMedia","component","height","image","m","CardContent","Typography","variant","content","Divider","my","Box","display","gap","alignItems","motion","span","onClick","handleLike","emit","userId","whileTap","scale","animate","style","cursor","FavoriteIcon","color","CommentIcon","comments","mt","TextField","fullWidth","size","placeholder","value","onChange","e","target","Button","handleComment","trim","message","concat","Loading","className","PulseLoader","PostList","posts","setPosts","loading","setLoading","async","res","api","get","data","err","console","error","fetchPosts","refreshPosts","map","Post","currentUser","onInteraction","padding","Skeleton","width","animation"],"sourceRoot":""}